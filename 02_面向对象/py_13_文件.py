# -----------------------------------知识点------------------------------------------
"""
1.计算机的 文件，就是存储在某种 长期储存设备 上的一段 数据
2.存储方式:在计算机中，文件是以 二进制 的方式保存在磁盘上的
    文本文件:
        可以使用 文本编辑软件 查看
        本质上还是二进制文件
        例如：python 的源程序

    二进制文件:
        保存的内容 不是给人直接阅读的，而是 提供给其他软件使用的
        例如：图片文件、音频文件、视频文件等等
        二进制文件不能使用 文本编辑软件 查看
3. 文件的基本操作
    三个步骤：
        1.打开文件
        2.读、写文件
            读 将文件内容读入内存
            写 将内存内容写入文件
        3.关闭文件

    操作文件的函数/方法( 1 个函数和 3 个方法)
        01 	open 	打开文件，并且返回文件操作对象  -->  此函数开文件，并返回文件对象,其他三个方法通过文件对象来调用
        02 	read 	将文件内容读取到内存
        03 	write 	将指定内容写入文件
        04 	close 	关闭文件


"""
# -----------------------------------练习------------------------------------------
print("-----------------读取文件---------------------")
'''
读取文件:
    open 函数的第一个参数是要打开的文件名（文件名区分大小写）
        如果文件存在，返回文件操作对象
        如果文件不存在，会抛出异常
    read 方法可以一次性读入并返回文件的所有内容
    close 方法负责关闭文件
        如果 忘记关闭文件，会造成系统资源消耗，而且会影响到后续对文件的访问
    注意：read 方法执行后，会把 文件指针 移动到 文件的末尾
          ***在开发中，通常会先编写open和close的代码,然后写读写操作

文件指针（知道）:

    文件指针标记从哪个位置开始读取数据
    第一次打开文件时，通常文件指针会指向文件的开始位置
    当执行了read方法后，文件指针会移动到读取内容的末尾(默认情况下会移动到文件末尾)
    思考
        如果执行了一次 read 方法，读取了所有内容，那么再次调用 read 方法，还能够获得到内容吗？
    答案
        不能
        第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容

按行读取文件内容
    read 方法默认会把文件的所有内容一次性读取到内存
    如果文件太大，对内存的占用会非常严重

    readline 方法(读取大文件)
        readline 方法可以一次读取一行内容
        方法执行后，会把文件指针移动到下一行，准备再次读取

'''
# 1. 打开 - 文件名需要注意大小写
file = open("README")

# 2. 读取
text = file.read()
print(text)

# 3. 关闭
file.close()

print("-----------按行读取-------------")
# # 打开文件
file = open("README")

# while True:
#     # 读取一行内容
#     text = file.readline()
#
#     # 判断是否读到内容(读到文章末尾退出)
#     if not text:
#         break
#
#     # 每读取一行的末尾已经有了一个 `\n`
#     print(text, end="")
text = file.readline()      # 读取第一行数据
print(text, end="")
text = file.readline()      # 读取第二行数据
print(text, end="")
text = file.readline()      # 读取第三行数据
print(text, end="")
# 关闭文件
file.close()

print("-----------------打开文件---------------------")
'''
open 函数默认以只读方式打开文件，并且返回文件对象
    语法如下： f = open("文件名", "访问方式")
    访问方式:
        r 	    以只读方式打开文件。文件的指针将会放在文件的开头，这是默认模式。如果文件不存在，抛出异常
        w 	    以只写方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件
        a 	    以追加方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入
        r+ 	果文件存在会被覆盖。如果文件不存在，创建新文件
        a+ 	以读写方式打开文件。如果该文以读写方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常
        w+ 	以读写方式打开文件。如件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入
            (开发中更多会用只读、只写,因为频繁的移动文件指针，会影响读写效率 )

'''
# 打开文件
f = open("README", "w")

f.write("hello python！\n")
f.write("今天天气真好\n")
f.write("哈哈哈哈\n")

# 关闭文件
f.close()

print("-----------------复制案例---------------------")

# 1.打开一个文件
file_read = open("README")                  # 默认只读
file_write = open("README[复件]","w")     # 只写
# 2.读取并写入文件
text = file_read.read()
file_write.write(text)
# 3.关闭文件
file_read.close()
file_write.close()

print("-----------------复制案例(大文件)---------------------")
# 1.打开一个文件
file_read = open("README")                  # 默认只读
file_write = open("README[复件1]","w")     # 只写
# 2.读取并写入文件
while True:
    f = file_read.readline()

    if not f:       # 如果此行是末尾就跳出,如果不是就写入复制文件
        break
    else:
        file_write.write(f)
# 3.关闭文件
file_read.close()
file_write.close()
